// <auto-generated />
using System;
using HMSProjectOfMine.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HMSProjectOfMine.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HMSProjectOfMine.Models.Admission", b =>
                {
                    b.Property<int>("AdmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdmissionId"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("AdmissionFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BedId")
                        .HasColumnType("int");

                    b.Property<decimal>("ChargePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Floor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("ReferredBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdmissionId");

                    b.HasIndex("BedId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Admissions");

                    b.HasData(
                        new
                        {
                            AdmissionId = 1,
                            AdmissionDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AdmissionFee = 5000.00m,
                            BedId = 1,
                            ChargePerDay = 1500.00m,
                            DischargeDate = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Floor = "2nd Floor",
                            NurseName = "Ayesha Khatun",
                            PatientId = 1,
                            ReferredBy = "Dr. Rafiq"
                        });
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<int?>("AdmissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferralCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TokenId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("AdmissionId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TokenId");

                    b.ToTable("Appointments", t =>
                        {
                            t.HasCheckConstraint("CK_AppointmentStatus_ValidValues", "AppointmentStatus IN ('Scheduled', 'Arrived', 'InConsultation', 'Completed', 'Cancelled', 'NoShow')");

                            t.HasCheckConstraint("CK_AppointmentType_ValidValues", "AppointmentType IN ('General', 'FollowUp', 'Emergency', 'PostOperative', 'Preventive', 'Referral')");
                        });

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            AdmissionId = 1,
                            AppointmentDate = new DateTime(2025, 5, 2, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatus = "Scheduled",
                            AppointmentType = "General",
                            DoctorId = 1,
                            PatientId = 1,
                            PatientPhone = "01712345678",
                            ReferralCode = "REF123",
                            TokenId = 1
                        });
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Bed", b =>
                {
                    b.Property<int>("BedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedId"));

                    b.Property<string>("BedNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("BedId");

                    b.HasIndex("WardId");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            BedId = 1,
                            BedNumber = "101",
                            IsOccupied = true,
                            WardId = 1
                        },
                        new
                        {
                            BedId = 2,
                            BedNumber = "102",
                            IsOccupied = false,
                            WardId = 2
                        },
                        new
                        {
                            BedId = 3,
                            BedNumber = "103",
                            IsOccupied = true,
                            WardId = 3
                        },
                        new
                        {
                            BedId = 4,
                            BedNumber = "104",
                            IsOccupied = false,
                            WardId = 4
                        });
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Chamber", b =>
                {
                    b.Property<int>("ChamberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChamberId"));

                    b.Property<string>("ChamberNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ChamberId");

                    b.ToTable("Chambers");

                    b.HasData(
                        new
                        {
                            ChamberId = 1,
                            ChamberNo = "207A",
                            Location = "2nd Floor"
                        });
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = "Cardiology"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "Neurology"
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentName = "Orthopedics"
                        },
                        new
                        {
                            DepartmentId = 4,
                            DepartmentName = "ENT"
                        },
                        new
                        {
                            DepartmentId = 5,
                            DepartmentName = "Urology"
                        },
                        new
                        {
                            DepartmentId = 6,
                            DepartmentName = "Pediatrics"
                        },
                        new
                        {
                            DepartmentId = 7,
                            DepartmentName = "Pathology"
                        },
                        new
                        {
                            DepartmentId = 8,
                            DepartmentName = "Ophthalmology"
                        });
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            DepartmentId = 1,
                            Email = "Remon@gmail.com",
                            FirstName = "Remon",
                            ImageUrl = "sjfgbasfg",
                            LastName = "Hossan",
                            Phone = "01236454487",
                            SpecializationId = 1
                        });
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.DoctorChamber", b =>
                {
                    b.Property<int>("DoctorChamberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorChamberId"));

                    b.Property<string>("AvailableTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChamberId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("DoctorChamberId");

                    b.HasIndex("ChamberId");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorChambers");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.DoctorFee", b =>
                {
                    b.Property<int>("DoctorFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorFeeId"));

                    b.Property<decimal?>("ChargedFee")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[Fees] - [DiscountAmount]", true);

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VisitType")
                        .HasColumnType("int");

                    b.HasKey("DoctorFeeId");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorFees");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.DoctorSchedule", b =>
                {
                    b.Property<int>("DoctorScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorScheduleId"));

                    b.Property<int>("ChamberId")
                        .HasColumnType("int");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("DoctorScheduleId");

                    b.HasIndex("ChamberId");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorSchedules");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineId"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenericName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicineId");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            MedicineId = 1,
                            Company = "iuytre",
                            GenericName = "qwerty",
                            MedicineName = "Monus 10",
                            MedicineType = "Tablet"
                        });
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicineBill", b =>
                {
                    b.Property<int>("MedicineBillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineBillId"));

                    b.Property<string>("MedicineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MedicineBillId");

                    b.ToTable("MedicineBills");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicineBilling", b =>
                {
                    b.Property<int>("MedicineBillingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineBillingId"));

                    b.Property<string>("BillNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("DeliveryTime")
                        .HasColumnType("time");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("DueAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<decimal>("PayableAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RefBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("MedicineBillingId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicineBillings");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicineBillingDetail", b =>
                {
                    b.Property<int>("MedicineBillingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineBillingDetailId"));

                    b.Property<int>("MedicineBillId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineBillingId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MedicineBillingDetailId");

                    b.HasIndex("MedicineBillId");

                    b.HasIndex("MedicineBillingId");

                    b.ToTable("MedicineBillingDetails");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicineLoss", b =>
                {
                    b.Property<int>("MedicineLossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineLossId"));

                    b.Property<decimal>("LossAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LossDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LossReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicinePurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityLoss")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalLoss")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[LossAmount] * [QuantityLoss]", true);

                    b.HasKey("MedicineLossId");

                    b.HasIndex("MedicinePurchaseId");

                    b.ToTable("MedicineLosses");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicineProfit", b =>
                {
                    b.Property<int>("MedicineProfitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineProfitId"));

                    b.Property<int>("MedicineSaleId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProfitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ProfitDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuantityProfit")
                        .HasColumnType("int");

                    b.Property<int>("QuantitySold")
                        .HasColumnType("int")
                        .HasColumnName("QuantitySold");

                    b.Property<decimal>("TotalProfit")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[ProfitAmount] * [QuantitySold]", true);

                    b.HasKey("MedicineProfitId");

                    b.HasIndex("MedicineSaleId");

                    b.ToTable("MedicineProfits");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicinePurchase", b =>
                {
                    b.Property<int>("MedicinePurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicinePurchaseId"));

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityPurchased")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[PurchasePrice] * [QuantityPurchased] + [VAT]", true);

                    b.Property<decimal>("VAT")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MedicinePurchaseId");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicinePurchases");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicineSale", b =>
                {
                    b.Property<int>("MedicineSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineSaleId"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("QuantitySold")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[SalePrice] * [QuantitySold] - [Discount]", true);

                    b.HasKey("MedicineSaleId");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineSales");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FirstVisitDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<string>("VisitType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients", t =>
                        {
                            t.HasCheckConstraint("CK_Patient_Gender", "[Gender] IN ('Male', 'Female', 'Other')");

                            t.HasCheckConstraint("CK_Patient_PatientType", "[PatientType] IN ('Indoor', 'Outdoor')");

                            t.HasCheckConstraint("CK_Patient_VisitType", "[VisitType] IN ('FirstVisit', 'FollowUp', 'TestReview', 'Others')");
                        });

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            Age = 0,
                            FirstName = "Maria",
                            FirstVisitDate = new DateTime(2025, 5, 13, 14, 55, 49, 104, DateTimeKind.Local).AddTicks(666),
                            Gender = "Female",
                            LastName = "Ahmed",
                            PatientNo = "1A",
                            PatientType = "Outdoor",
                            VisitType = "FirstVisit"
                        });
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.PhysicalSymptom", b =>
                {
                    b.Property<int>("PhysicalSymptomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicalSymptomId"));

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<string>("SymptomDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhysicalSymptomId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PhysicalSymptoms");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<string>("Assessment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrescriptionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TokenId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.PrescriptionAdvice", b =>
                {
                    b.Property<int>("PrescriptionAdviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionAdviceId"));

                    b.Property<string>("Advice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionAdviceId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionAdvices");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.PrescriptionDiagnosis", b =>
                {
                    b.Property<int>("PrescriptionDiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionDiagnosisId"));

                    b.Property<string>("DiagnosisTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionDiagnosisId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionDiagnoses");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.PrescriptionMedicine", b =>
                {
                    b.Property<int>("PrescriptionMedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionMedicineId"));

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionMedicineId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionMedicines");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.PrescriptionTest", b =>
                {
                    b.Property<int>("PrescriptionTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionTestId"));

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionTestId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("TestId");

                    b.ToTable("PrescriptionTests");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Registration", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("DATE");

                    b.Property<string>("EmergencyContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("EmergencyContactPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR(15)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("Occupation")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR(15)");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR(30)");

                    b.HasKey("RegistrationId");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("Registrations", t =>
                        {
                            t.HasCheckConstraint("CK_BloodGroups_BloodType", "[BloodType] IN ('A_POS', 'A_NEG', 'B_POS', 'B_NEG', 'O_POS', 'O_NEG', 'AB_POS', 'AB_NEG')");

                            t.HasCheckConstraint("CK_Registration_MaritalStatus", "[MaritalStatus] IN ('Single', 'Married', 'Divorced', 'Widowed')");
                        });
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Specialization", b =>
                {
                    b.Property<int>("SpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecializationId"));

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SpecializationId");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            SpecializationId = 1,
                            SpecializationName = "Madesin"
                        },
                        new
                        {
                            SpecializationId = 2,
                            SpecializationName = "Sergary"
                        });
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TestId");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            TestId = 1,
                            Price = 2000m,
                            TestName = "CBC"
                        },
                        new
                        {
                            TestId = 2,
                            Price = 2000m,
                            TestName = "dfg"
                        });
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.TestBilling", b =>
                {
                    b.Property<int>("TestBillingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestBillingId"));

                    b.Property<string>("BillNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("DeliveryTime")
                        .HasColumnType("time");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("DueAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<decimal>("PayableAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RefBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TestBillingId");

                    b.HasIndex("PatientId");

                    b.ToTable("TestBillings");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.TestBillingDetail", b =>
                {
                    b.Property<int>("TestBillingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestBillingDetailId"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TestBillingId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TestBillingDetailId");

                    b.HasIndex("TestBillingId");

                    b.HasIndex("TestId");

                    b.ToTable("TestBillingDetails");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.TestReport", b =>
                {
                    b.Property<int>("TestReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestReportId"));

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("bit");

                    b.Property<int>("PrescriptionTestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReportDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("TestResult")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestReportId");

                    b.HasIndex("PrescriptionTestId");

                    b.ToTable("TestReports");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Token", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"));

                    b.Property<int>("ChamberId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<decimal>("TokenFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TokenNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TokenId");

                    b.HasIndex("ChamberId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Tokens");

                    b.HasData(
                        new
                        {
                            TokenId = 1,
                            ChamberId = 1,
                            DoctorId = 1,
                            IssueTime = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            TokenFee = 20m,
                            TokenNumber = "101"
                        });
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Ward", b =>
                {
                    b.Property<int>("WardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WardId"));

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WardType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("WardId");

                    b.ToTable("Wards", t =>
                        {
                            t.HasCheckConstraint("CK_WardType_ValidValues", "WardType IN ('General', 'ICU', 'Maternity', 'Cabin')");
                        });

                    b.HasData(
                        new
                        {
                            WardId = 1,
                            WardName = "Male",
                            WardType = "General"
                        },
                        new
                        {
                            WardId = 2,
                            WardName = "Female",
                            WardType = "General"
                        },
                        new
                        {
                            WardId = 3,
                            WardName = "Male",
                            WardType = "Cabin"
                        },
                        new
                        {
                            WardId = 4,
                            WardName = "Female",
                            WardType = "Cabin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Admission", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Bed", "Bed")
                        .WithMany("Admissions")
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSProjectOfMine.Models.Doctor", "Doctor")
                        .WithMany("Admissions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSProjectOfMine.Models.Patient", "Patient")
                        .WithMany("Admissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Appointment", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Admission", "Admission")
                        .WithMany("Appointments")
                        .HasForeignKey("AdmissionId");

                    b.HasOne("HMSProjectOfMine.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSProjectOfMine.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSProjectOfMine.Models.Token", "Token")
                        .WithMany("Appointments")
                        .HasForeignKey("TokenId");

                    b.Navigation("Admission");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Bed", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Ward", "Ward")
                        .WithMany("Beds")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Doctor", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSProjectOfMine.Models.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId");

                    b.Navigation("Department");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.DoctorChamber", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Chamber", "Chamber")
                        .WithMany("DoctorChambers")
                        .HasForeignKey("ChamberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSProjectOfMine.Models.Doctor", "Doctor")
                        .WithMany("DoctorChambers")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chamber");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.DoctorFee", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Doctor", "Doctor")
                        .WithMany("DoctorFees")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.DoctorSchedule", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Chamber", "Chamber")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("ChamberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSProjectOfMine.Models.Doctor", "Doctor")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chamber");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicineBilling", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicineBillingDetail", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.MedicineBill", "MedicineBill")
                        .WithMany("MedicineBillingDetails")
                        .HasForeignKey("MedicineBillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSProjectOfMine.Models.MedicineBilling", "MedicineBilling")
                        .WithMany("MedicineBillingDetails")
                        .HasForeignKey("MedicineBillingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicineBill");

                    b.Navigation("MedicineBilling");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicineLoss", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.MedicinePurchase", "MedicinePurchase")
                        .WithMany("MedicineLosses")
                        .HasForeignKey("MedicinePurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicinePurchase");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicineProfit", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.MedicineSale", "MedicineSale")
                        .WithMany("MedicineProfits")
                        .HasForeignKey("MedicineSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicineSale");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicinePurchase", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Medicine", "Medicine")
                        .WithMany("MedicinePurchases")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicineSale", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Medicine", "Medicine")
                        .WithMany("MedicineSales")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.PhysicalSymptom", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Prescription", "Prescription")
                        .WithMany("PhysicalSymptoms")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Prescription", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSProjectOfMine.Models.Token", "Token")
                        .WithMany("Prescriptions")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.PrescriptionAdvice", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionAdvices")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.PrescriptionDiagnosis", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionDiagnoses")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.PrescriptionMedicine", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSProjectOfMine.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionMedicines")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.PrescriptionTest", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionTests")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSProjectOfMine.Models.Test", "Test")
                        .WithMany("PrescriptionTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Registration", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Patient", "Patient")
                        .WithOne("Registration")
                        .HasForeignKey("HMSProjectOfMine.Models.Registration", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.TestBilling", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.TestBillingDetail", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.TestBilling", "TestBilling")
                        .WithMany("TestBillingDetails")
                        .HasForeignKey("TestBillingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSProjectOfMine.Models.Test", "Test")
                        .WithMany("TestBillingDetails")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("TestBilling");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.TestReport", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.PrescriptionTest", "PrescriptionTest")
                        .WithMany("TestReports")
                        .HasForeignKey("PrescriptionTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrescriptionTest");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Token", b =>
                {
                    b.HasOne("HMSProjectOfMine.Models.Chamber", "Chamber")
                        .WithMany("Tokens")
                        .HasForeignKey("ChamberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSProjectOfMine.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMSProjectOfMine.Models.Patient", "Patient")
                        .WithMany("Tokens")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chamber");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Admission", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Bed", b =>
                {
                    b.Navigation("Admissions");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Chamber", b =>
                {
                    b.Navigation("DoctorChambers");

                    b.Navigation("DoctorSchedules");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Department", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Doctor", b =>
                {
                    b.Navigation("Admissions");

                    b.Navigation("Appointments");

                    b.Navigation("DoctorChambers");

                    b.Navigation("DoctorFees");

                    b.Navigation("DoctorSchedules");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Medicine", b =>
                {
                    b.Navigation("MedicinePurchases");

                    b.Navigation("MedicineSales");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicineBill", b =>
                {
                    b.Navigation("MedicineBillingDetails");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicineBilling", b =>
                {
                    b.Navigation("MedicineBillingDetails");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicinePurchase", b =>
                {
                    b.Navigation("MedicineLosses");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.MedicineSale", b =>
                {
                    b.Navigation("MedicineProfits");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Patient", b =>
                {
                    b.Navigation("Admissions");

                    b.Navigation("Appointments");

                    b.Navigation("Registration");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Prescription", b =>
                {
                    b.Navigation("PhysicalSymptoms");

                    b.Navigation("PrescriptionAdvices");

                    b.Navigation("PrescriptionDiagnoses");

                    b.Navigation("PrescriptionMedicines");

                    b.Navigation("PrescriptionTests");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.PrescriptionTest", b =>
                {
                    b.Navigation("TestReports");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Test", b =>
                {
                    b.Navigation("PrescriptionTests");

                    b.Navigation("TestBillingDetails");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.TestBilling", b =>
                {
                    b.Navigation("TestBillingDetails");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Token", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HMSProjectOfMine.Models.Ward", b =>
                {
                    b.Navigation("Beds");
                });
#pragma warning restore 612, 618
        }
    }
}
