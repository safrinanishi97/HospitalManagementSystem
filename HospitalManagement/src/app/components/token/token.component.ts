import { Component, OnInit } from '@angular/core';
import {
  FormBuilder,
  FormGroup,
  FormsModule,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';

import { CommonModule } from '@angular/common';
import { TokenService } from '../../services/token.service';
import { Chamber, Doctor, Patient, TokenDto } from '../../Models/token-dto';

@Component({
  selector: 'app-token',
  templateUrl: './token.component.html',
  imports: [CommonModule, ReactiveFormsModule, FormsModule],
  styleUrls: ['./token.component.css'], // fixed typo: styleUrl â†’ styleUrls
})
// export class TokenComponent implements OnInit {
//   tokenForm!: FormGroup;
//   doctors: Doctor[] = [];
//   chambers: Chamber[] = [];
//   patients: Patient[] = [];

//   constructor(private tokenService: TokenService, private fb: FormBuilder) {}

//   ngOnInit(): void {
//     this.tokenForm = this.fb.group({
//       patientId: [null, Validators.required],
//       doctorId: [null, Validators.required],
//       chamberId: [null, Validators.required],
//       tokenFee: [null, [Validators.required, Validators.min(0)]],
//     });

//     this.loadDropdownData();
//   }

//   loadDropdownData(): void {
//     this.tokenService.getDoctors().subscribe((data) => (this.doctors = data));
//     this.tokenService.getChambers().subscribe((data) => (this.chambers = data));
//     this.tokenService.getPatients().subscribe((data) => (this.patients = data));
//   }

//   onSubmit(): void {
//     if (this.tokenForm.invalid) return;

//     const formData = this.tokenForm.value;

//     const tokenData: TokenDto = {
//       //tokenId: formData.token,
//       patientId: formData.patientId,
//       doctorId: formData.doctorId,
//       chamberId: formData.chamberId,
//       tokenFee: formData.tokenFee,
//       tokenNumber: '', // Will be generated by the backend
//       issueTime: null, // Backend will handle this
//     };

//     this.tokenService.createToken(tokenData).subscribe({
//       next: (response) => {
//         alert(`Token created successfully: ${response.tokenNumber}`);
//         this.tokenForm.reset();
//       },
//       error: (err) => {
//         console.error('Error creating token:', err);
//         alert('Error creating token');
//       },
//     });
//   }
// }
export class TokenComponent implements OnInit {
  tokenForm!: FormGroup;
  doctors: Doctor[] = [];
  chambers: Chamber[] = [];
  patients: Patient[] = [];
  successMessage: string | null = null;
  errorMessage: string | null = null;

  constructor(private tokenService: TokenService, private fb: FormBuilder) {}

  ngOnInit(): void {
    this.tokenForm = this.fb.group({
      patientId: [null, Validators.required],
      doctorId: [null, Validators.required],
      chamberId: [null, Validators.required],
      tokenFee: [null, [Validators.required, Validators.min(0)]],
    });

    this.loadDropdownData();
  }

  loadDropdownData(): void {
    this.tokenService.getDoctors().subscribe({
      next: (data) => {
        console.log('Doctors:', data);
        this.doctors = data;
      },
      error: (err) => {
        console.error('Error loading doctors:', err);
      },
    });

    this.tokenService.getChambers().subscribe({
      next: (data) => {
        console.log('Chambers:', data);
        this.chambers = data;
      },
      error: (err) => {
        console.error('Error loading chambers:', err);
      },
    });

    this.tokenService.getPatients().subscribe({
      next: (data) => {
        console.log('Patients:', data);
        this.patients = data;
      },
      error: (err) => {
        console.error('Error loading patients:', err);
      },
    });
  }

  onSubmit(): void {
    if (this.tokenForm.invalid) return;

    const formData = this.tokenForm.value;

    const tokenData: TokenDto = {
      patientId: formData.patientId,
      doctorId: formData.doctorId,
      chamberId: formData.chamberId,
      tokenFee: formData.tokenFee,
      tokenNumber: '', // Will be generated by the backend
      issueTime: null, // Backend will handle this
    };

    this.tokenService.createToken(tokenData).subscribe({
      next: (response) => {
        this.successMessage = `Token created successfully: ${response.tokenNumber}`;
        this.errorMessage = null; // Reset error message if successful
        this.tokenForm.reset();
      },
      error: (err) => {
        this.errorMessage = 'Error creating token. Please try again later.';
        this.successMessage = null; // Reset success message if there is an error
        console.error('Error creating token:', err);
      },
    });
  }
}
